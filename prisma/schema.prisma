// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id
  name                    String
  email                   String
  uniqueCitizenshipNumber String?
  emailVerified           Boolean
  image                   String?
  createdAt               DateTime
  updatedAt               DateTime
  role                    String?
  banned                  Boolean?
  banReason               String?
  banExpires              DateTime?
  sessions                Session[]
  accounts                Account[]
  doctor                  Doctor?
  patient     Patient?

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum DoctorSpecialization {
  GENERAL_PRACTITIONER
  ALLERGIST
  ANESTHESIOLOGIST
  CARDIOLOGIST
  DERMATOLOGIST
  ENDOCRINOLOGIST
  GASTROENTEROLOGIST
  HEMATOLOGIST
  INFECTIOUS_DISEASE
  NEUROLOGIST
  NEPHROLOGIST
  OBSTETRICIAN
  GYNECOLOGIST
  ONCOLOGIST
  OPHTHALMOLOGIST
  ORTHOPEDIC_SURGEON
  OTOLARYNGOLOGIST
  PEDIATRICIAN
  PSYCHIATRIST
  PULMONOLOGIST
  RADIOLOGIST
  RHEUMATOLOGIST
  UROLOGIST
  PATHOLOGIST
  PLASTIC_SURGEON
  GENERAL_SURGEON
  VASCULAR_SURGEON
  NEUROSURGEON
  DENTIST
}

model Doctor {
  id             String               @id @default(uuid())
  userId         String               @unique
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenseNumber  String               @unique
  specialization DoctorSpecialization
  hospital       String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  appointments Appointment[]

  @@map("doctor")
}

enum Gender {
  MALE
  FEMALE
}

enum BloodType {
  AB_POSTIVE
  AB_NEGATIVE
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSTIVE
  O_NEGATIVE
}

model Patient {
  id          String    @id @default(uuid())
  gender      Gender
  bloodType   BloodType
  heightCm    Int
  weightKg    Float
  phoneNumber String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  appointments Appointment[]

  @@map("patient")
}

model Appointment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  date      DateTime
  reason    String
  completed Boolean  @default(false)
  notes     String? // after completion

  patientId String @unique
  patient   Patient   @relation(fields: [patientId], references: [id])

  doctorId String @unique
  doctor   Doctor   @relation(fields: [doctorId], references: [id])

  @@map("appointment")
}
